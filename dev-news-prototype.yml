---
AWSTemplateFormatVersion: "2010-09-09"

Description:
  Deploys the Dev News Environment

Resources:
  DevNewsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: DynamoDevNewsTable
      AttributeDefinitions:
        -
          AttributeName: PostUrl
          AttributeType: S
      KeySchema:
        -
          AttributeName: PostUrl
          KeyType: HASH
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  DynamoDbExecutionRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: DynamoDbExecutionRole
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: Allow
            Principal: 
              Service: 
                - lambda.amazonaws.com
            Action: 
              - "sts:AssumeRole"
      Path: "/dev_news/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies: 
        - 
          PolicyName: DynamoDbExecutionRolePolicy
          PolicyDocument: 
            Version: 2012-10-17
            Statement: 
              - 
                Effect: Allow
                Action: 
                  - dynamodb:PutItem #EDIT
                  - dynamodb:Scan #EDIT 
                  - dynamodb:Query #EDIT
                Resource: !GetAtt DevNewsTable.Arn
  
# APIS
  PostNewsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: PostNews
      Runtime: nodejs10.x
      Role: !GetAtt DynamoDbExecutionRole.Arn
      Timeout: 5
      MemorySize: 128
      Handler: index.handler

  ListNewsFunction: #EDIT
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ListArticles #EDIT
      Runtime: nodejs10.x
      Role: !GetAtt DynamoDbExecutionRole.Arn
      Timeout: 5
      MemorySize: 128
      Handler: index.handler
# END APIS

  DevNewsApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: DevNews
      EndpointConfiguration:
        Types:
          - REGIONAL
      Body:
        swagger: 2.0
        info:
          version: 1.0.0
          title: DevNews
        paths:
          /postArticle:
            post:
              description: Post News API
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - CognitoAuthorizer: []
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                uri: 
                  Fn::Join:
                    - ""
                    - - "arn:aws:apigateway:"
                      - !Ref AWS::Region
                      - ":lambda:path/2015-03-31/functions/"
                      - !GetAtt PostNewsFunction.Arn
                      - "/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            options:
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /listArticles:  #EDIT
            post:
              description: List Articles #EDIT
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - CognitoAuthorizer: []
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                uri: 
                  Fn::Join:
                    - ""
                    - - "arn:aws:apigateway:"
                      - !Ref AWS::Region
                      - ":lambda:path/2015-03-31/functions/"
                      - !GetAtt ListNewsFunction.Arn #EDIT
                      - "/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "GET" #EDIT
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            options:
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'" #EDIT
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"

  Default4XXGatewayResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      ResponseType: DEFAULT_4XX
      RestApiId: !Ref DevNewsApi

  Default5XXGatewayResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      ResponseType: DEFAULT_5XX
      RestApiId: !Ref DevNewsApi

  DevNewsApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: Dev deployment for news API
      RestApiId: !Ref DevNewsApi
      StageName: prod         

#SETUP Lambda Permissions

  DevNewsPostNewsFunctionPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref PostNewsFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - !Ref AWS::Region
            - ":"
            - !Ref AWS::AccountId
            - ":"
            - !Ref DevNewsApi
            - "/*"

  DevNewsListNewsFunctionPermissions: #EDIT
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ListNewsFunction #EDIT
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - !Ref AWS::Region
            - ":"
            - !Ref AWS::AccountId
            - ":"
            - !Ref DevNewsApi
            - "/*"

#End


# Create Policy for IAM Auth through APIs
  CognitoIdentityPoolAuthStandardPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: DevNewsApi-StandardUserPolicy-RW
      Description: "Managed IAM policy to provide API invocation permissions to Dev News API"
      Path: "/dev_news/"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: execute-api:Invoke
          Resource:
            Fn::Join:
              - ""
              - - "arn:aws:execute-api:"
                - !Ref "AWS::Region"
                - ":"
                - !Ref "AWS::AccountId"
                - ":"
                - !Ref "DevNewsApi"
                - "/*/*/*"
#End


  ProfilePicturesBucket:
    Properties:
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders: ["*"]
          AllowedMethods: ["GET","HEAD","PUT","POST","DELETE"]
          AllowedOrigins: ["*"]
          ExposedHeaders: ["x-amz-server-side-encryption","x-amz-request-id","x-amz-id-2","ETag"]
          MaxAge: '3600'
    Type: "AWS::S3::Bucket"

Outputs:
  DevNewsApiInvokeUrl:
    Description: URL for the deployed dev news API
    Value:
      Fn::Join:
        - ""
        - - "https://"
          - !Ref DevNewsApi
          - ".execute-api."
          - !Ref AWS::Region
          - ".amazonaws.com/prod"
    Export:
      Name: DevNewsApiUrl
  DevNewsProfilePicturesBucket:
    Description: S3 bucket to store user uploaded profile pictures
    Value: !Ref "ProfilePicturesBucket"